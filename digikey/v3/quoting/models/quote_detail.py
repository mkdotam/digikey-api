# coding: utf-8

"""
    Quoting Api

    Create/Update/Read for Quoting  # noqa: E501

    OpenAPI spec version: v3
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuoteDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'non_inventory_part_number': 'str',
        'digi_key_part_number': 'str',
        'manufacturer_part_number': 'str',
        'manufacturer_name': 'str',
        'catalog_description': 'str',
        'price_breaks': 'list[QuotePriceBreak]',
        'quantity_quoted': 'list[int]',
        'lead_status': 'str',
        'rohs_status': 'str',
        'stock_status': 'str',
        'vendor_lead_weeks': 'str',
        'pack_type_code': 'str',
        'alternate_packaging': 'bool',
        'substitutes': 'list[SubstitutePart]',
        'date_expiration': 'datetime',
        'comments': 'str',
        'error': 'str',
        'detail_id': 'int'
    }

    attribute_map = {
        'non_inventory_part_number': 'NonInventoryPartNumber',
        'digi_key_part_number': 'DigiKeyPartNumber',
        'manufacturer_part_number': 'ManufacturerPartNumber',
        'manufacturer_name': 'ManufacturerName',
        'catalog_description': 'CatalogDescription',
        'price_breaks': 'PriceBreaks',
        'quantity_quoted': 'QuantityQuoted',
        'lead_status': 'LeadStatus',
        'rohs_status': 'RohsStatus',
        'stock_status': 'StockStatus',
        'vendor_lead_weeks': 'VendorLeadWeeks',
        'pack_type_code': 'PackTypeCode',
        'alternate_packaging': 'AlternatePackaging',
        'substitutes': 'Substitutes',
        'date_expiration': 'DateExpiration',
        'comments': 'Comments',
        'error': 'Error',
        'detail_id': 'DetailId'
    }

    def __init__(self, non_inventory_part_number=None, digi_key_part_number=None, manufacturer_part_number=None, manufacturer_name=None, catalog_description=None, price_breaks=None, quantity_quoted=None, lead_status=None, rohs_status=None, stock_status=None, vendor_lead_weeks=None, pack_type_code=None, alternate_packaging=None, substitutes=None, date_expiration=None, comments=None, error=None, detail_id=None):  # noqa: E501
        """QuoteDetail - a model defined in Swagger"""  # noqa: E501

        self._non_inventory_part_number = None
        self._digi_key_part_number = None
        self._manufacturer_part_number = None
        self._manufacturer_name = None
        self._catalog_description = None
        self._price_breaks = None
        self._quantity_quoted = None
        self._lead_status = None
        self._rohs_status = None
        self._stock_status = None
        self._vendor_lead_weeks = None
        self._pack_type_code = None
        self._alternate_packaging = None
        self._substitutes = None
        self._date_expiration = None
        self._comments = None
        self._error = None
        self._detail_id = None
        self.discriminator = None

        if non_inventory_part_number is not None:
            self.non_inventory_part_number = non_inventory_part_number
        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if manufacturer_name is not None:
            self.manufacturer_name = manufacturer_name
        if catalog_description is not None:
            self.catalog_description = catalog_description
        if price_breaks is not None:
            self.price_breaks = price_breaks
        if quantity_quoted is not None:
            self.quantity_quoted = quantity_quoted
        if lead_status is not None:
            self.lead_status = lead_status
        if rohs_status is not None:
            self.rohs_status = rohs_status
        if stock_status is not None:
            self.stock_status = stock_status
        if vendor_lead_weeks is not None:
            self.vendor_lead_weeks = vendor_lead_weeks
        if pack_type_code is not None:
            self.pack_type_code = pack_type_code
        if alternate_packaging is not None:
            self.alternate_packaging = alternate_packaging
        if substitutes is not None:
            self.substitutes = substitutes
        if date_expiration is not None:
            self.date_expiration = date_expiration
        if comments is not None:
            self.comments = comments
        if error is not None:
            self.error = error
        if detail_id is not None:
            self.detail_id = detail_id

    @property
    def non_inventory_part_number(self):
        """Gets the non_inventory_part_number of this QuoteDetail.  # noqa: E501


        :return: The non_inventory_part_number of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._non_inventory_part_number

    @non_inventory_part_number.setter
    def non_inventory_part_number(self, non_inventory_part_number):
        """Sets the non_inventory_part_number of this QuoteDetail.


        :param non_inventory_part_number: The non_inventory_part_number of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._non_inventory_part_number = non_inventory_part_number

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this QuoteDetail.  # noqa: E501


        :return: The digi_key_part_number of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this QuoteDetail.


        :param digi_key_part_number: The digi_key_part_number of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this QuoteDetail.  # noqa: E501


        :return: The manufacturer_part_number of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this QuoteDetail.


        :param manufacturer_part_number: The manufacturer_part_number of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def manufacturer_name(self):
        """Gets the manufacturer_name of this QuoteDetail.  # noqa: E501


        :return: The manufacturer_name of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_name

    @manufacturer_name.setter
    def manufacturer_name(self, manufacturer_name):
        """Sets the manufacturer_name of this QuoteDetail.


        :param manufacturer_name: The manufacturer_name of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._manufacturer_name = manufacturer_name

    @property
    def catalog_description(self):
        """Gets the catalog_description of this QuoteDetail.  # noqa: E501


        :return: The catalog_description of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._catalog_description

    @catalog_description.setter
    def catalog_description(self, catalog_description):
        """Sets the catalog_description of this QuoteDetail.


        :param catalog_description: The catalog_description of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._catalog_description = catalog_description

    @property
    def price_breaks(self):
        """Gets the price_breaks of this QuoteDetail.  # noqa: E501


        :return: The price_breaks of this QuoteDetail.  # noqa: E501
        :rtype: list[QuotePriceBreak]
        """
        return self._price_breaks

    @price_breaks.setter
    def price_breaks(self, price_breaks):
        """Sets the price_breaks of this QuoteDetail.


        :param price_breaks: The price_breaks of this QuoteDetail.  # noqa: E501
        :type: list[QuotePriceBreak]
        """

        self._price_breaks = price_breaks

    @property
    def quantity_quoted(self):
        """Gets the quantity_quoted of this QuoteDetail.  # noqa: E501


        :return: The quantity_quoted of this QuoteDetail.  # noqa: E501
        :rtype: list[int]
        """
        return self._quantity_quoted

    @quantity_quoted.setter
    def quantity_quoted(self, quantity_quoted):
        """Sets the quantity_quoted of this QuoteDetail.


        :param quantity_quoted: The quantity_quoted of this QuoteDetail.  # noqa: E501
        :type: list[int]
        """

        self._quantity_quoted = quantity_quoted

    @property
    def lead_status(self):
        """Gets the lead_status of this QuoteDetail.  # noqa: E501


        :return: The lead_status of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._lead_status

    @lead_status.setter
    def lead_status(self, lead_status):
        """Sets the lead_status of this QuoteDetail.


        :param lead_status: The lead_status of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._lead_status = lead_status

    @property
    def rohs_status(self):
        """Gets the rohs_status of this QuoteDetail.  # noqa: E501


        :return: The rohs_status of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._rohs_status

    @rohs_status.setter
    def rohs_status(self, rohs_status):
        """Sets the rohs_status of this QuoteDetail.


        :param rohs_status: The rohs_status of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._rohs_status = rohs_status

    @property
    def stock_status(self):
        """Gets the stock_status of this QuoteDetail.  # noqa: E501


        :return: The stock_status of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._stock_status

    @stock_status.setter
    def stock_status(self, stock_status):
        """Sets the stock_status of this QuoteDetail.


        :param stock_status: The stock_status of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._stock_status = stock_status

    @property
    def vendor_lead_weeks(self):
        """Gets the vendor_lead_weeks of this QuoteDetail.  # noqa: E501


        :return: The vendor_lead_weeks of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._vendor_lead_weeks

    @vendor_lead_weeks.setter
    def vendor_lead_weeks(self, vendor_lead_weeks):
        """Sets the vendor_lead_weeks of this QuoteDetail.


        :param vendor_lead_weeks: The vendor_lead_weeks of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._vendor_lead_weeks = vendor_lead_weeks

    @property
    def pack_type_code(self):
        """Gets the pack_type_code of this QuoteDetail.  # noqa: E501


        :return: The pack_type_code of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._pack_type_code

    @pack_type_code.setter
    def pack_type_code(self, pack_type_code):
        """Sets the pack_type_code of this QuoteDetail.


        :param pack_type_code: The pack_type_code of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._pack_type_code = pack_type_code

    @property
    def alternate_packaging(self):
        """Gets the alternate_packaging of this QuoteDetail.  # noqa: E501


        :return: The alternate_packaging of this QuoteDetail.  # noqa: E501
        :rtype: bool
        """
        return self._alternate_packaging

    @alternate_packaging.setter
    def alternate_packaging(self, alternate_packaging):
        """Sets the alternate_packaging of this QuoteDetail.


        :param alternate_packaging: The alternate_packaging of this QuoteDetail.  # noqa: E501
        :type: bool
        """

        self._alternate_packaging = alternate_packaging

    @property
    def substitutes(self):
        """Gets the substitutes of this QuoteDetail.  # noqa: E501


        :return: The substitutes of this QuoteDetail.  # noqa: E501
        :rtype: list[SubstitutePart]
        """
        return self._substitutes

    @substitutes.setter
    def substitutes(self, substitutes):
        """Sets the substitutes of this QuoteDetail.


        :param substitutes: The substitutes of this QuoteDetail.  # noqa: E501
        :type: list[SubstitutePart]
        """

        self._substitutes = substitutes

    @property
    def date_expiration(self):
        """Gets the date_expiration of this QuoteDetail.  # noqa: E501


        :return: The date_expiration of this QuoteDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._date_expiration

    @date_expiration.setter
    def date_expiration(self, date_expiration):
        """Sets the date_expiration of this QuoteDetail.


        :param date_expiration: The date_expiration of this QuoteDetail.  # noqa: E501
        :type: datetime
        """

        self._date_expiration = date_expiration

    @property
    def comments(self):
        """Gets the comments of this QuoteDetail.  # noqa: E501


        :return: The comments of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this QuoteDetail.


        :param comments: The comments of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def error(self):
        """Gets the error of this QuoteDetail.  # noqa: E501


        :return: The error of this QuoteDetail.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this QuoteDetail.


        :param error: The error of this QuoteDetail.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def detail_id(self):
        """Gets the detail_id of this QuoteDetail.  # noqa: E501


        :return: The detail_id of this QuoteDetail.  # noqa: E501
        :rtype: int
        """
        return self._detail_id

    @detail_id.setter
    def detail_id(self, detail_id):
        """Sets the detail_id of this QuoteDetail.


        :param detail_id: The detail_id of this QuoteDetail.  # noqa: E501
        :type: int
        """

        self._detail_id = detail_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
