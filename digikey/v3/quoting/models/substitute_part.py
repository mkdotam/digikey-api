# coding: utf-8

"""
    Quoting Api

    Create/Update/Read for Quoting  # noqa: E501

    OpenAPI spec version: v3
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubstitutePart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digi_key_part_number': 'str',
        'manufacturer_part_number': 'str',
        'catalog_description': 'str'
    }

    attribute_map = {
        'digi_key_part_number': 'DigiKeyPartNumber',
        'manufacturer_part_number': 'ManufacturerPartNumber',
        'catalog_description': 'CatalogDescription'
    }

    def __init__(self, digi_key_part_number=None, manufacturer_part_number=None, catalog_description=None):  # noqa: E501
        """SubstitutePart - a model defined in Swagger"""  # noqa: E501

        self._digi_key_part_number = None
        self._manufacturer_part_number = None
        self._catalog_description = None
        self.discriminator = None

        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if catalog_description is not None:
            self.catalog_description = catalog_description

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this SubstitutePart.  # noqa: E501


        :return: The digi_key_part_number of this SubstitutePart.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this SubstitutePart.


        :param digi_key_part_number: The digi_key_part_number of this SubstitutePart.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this SubstitutePart.  # noqa: E501


        :return: The manufacturer_part_number of this SubstitutePart.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this SubstitutePart.


        :param manufacturer_part_number: The manufacturer_part_number of this SubstitutePart.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def catalog_description(self):
        """Gets the catalog_description of this SubstitutePart.  # noqa: E501


        :return: The catalog_description of this SubstitutePart.  # noqa: E501
        :rtype: str
        """
        return self._catalog_description

    @catalog_description.setter
    def catalog_description(self, catalog_description):
        """Sets the catalog_description of this SubstitutePart.


        :param catalog_description: The catalog_description of this SubstitutePart.  # noqa: E501
        :type: str
        """

        self._catalog_description = catalog_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubstitutePart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubstitutePart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
